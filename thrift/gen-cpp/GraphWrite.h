/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GraphWrite_H
#define GraphWrite_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "graphwrite_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GraphWriteIf {
 public:
  virtual ~GraphWriteIf() {}
  virtual int64_t addEdge(const int64_t id1, const int64_t id2) = 0;
};

class GraphWriteIfFactory {
 public:
  typedef GraphWriteIf Handler;

  virtual ~GraphWriteIfFactory() {}

  virtual GraphWriteIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GraphWriteIf* /* handler */) = 0;
};

class GraphWriteIfSingletonFactory : virtual public GraphWriteIfFactory {
 public:
  GraphWriteIfSingletonFactory(const boost::shared_ptr<GraphWriteIf>& iface) : iface_(iface) {}
  virtual ~GraphWriteIfSingletonFactory() {}

  virtual GraphWriteIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GraphWriteIf* /* handler */) {}

 protected:
  boost::shared_ptr<GraphWriteIf> iface_;
};

class GraphWriteNull : virtual public GraphWriteIf {
 public:
  virtual ~GraphWriteNull() {}
  int64_t addEdge(const int64_t /* id1 */, const int64_t /* id2 */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _GraphWrite_addEdge_args__isset {
  _GraphWrite_addEdge_args__isset() : id1(false), id2(false) {}
  bool id1 :1;
  bool id2 :1;
} _GraphWrite_addEdge_args__isset;

class GraphWrite_addEdge_args {
 public:

  GraphWrite_addEdge_args(const GraphWrite_addEdge_args&);
  GraphWrite_addEdge_args& operator=(const GraphWrite_addEdge_args&);
  GraphWrite_addEdge_args() : id1(0), id2(0) {
  }

  virtual ~GraphWrite_addEdge_args() throw();
  int64_t id1;
  int64_t id2;

  _GraphWrite_addEdge_args__isset __isset;

  void __set_id1(const int64_t val);

  void __set_id2(const int64_t val);

  bool operator == (const GraphWrite_addEdge_args & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const GraphWrite_addEdge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphWrite_addEdge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GraphWrite_addEdge_pargs {
 public:


  virtual ~GraphWrite_addEdge_pargs() throw();
  const int64_t* id1;
  const int64_t* id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphWrite_addEdge_result__isset {
  _GraphWrite_addEdge_result__isset() : success(false) {}
  bool success :1;
} _GraphWrite_addEdge_result__isset;

class GraphWrite_addEdge_result {
 public:

  GraphWrite_addEdge_result(const GraphWrite_addEdge_result&);
  GraphWrite_addEdge_result& operator=(const GraphWrite_addEdge_result&);
  GraphWrite_addEdge_result() : success(0) {
  }

  virtual ~GraphWrite_addEdge_result() throw();
  int64_t success;

  _GraphWrite_addEdge_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const GraphWrite_addEdge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GraphWrite_addEdge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GraphWrite_addEdge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GraphWrite_addEdge_presult__isset {
  _GraphWrite_addEdge_presult__isset() : success(false) {}
  bool success :1;
} _GraphWrite_addEdge_presult__isset;

class GraphWrite_addEdge_presult {
 public:


  virtual ~GraphWrite_addEdge_presult() throw();
  int64_t* success;

  _GraphWrite_addEdge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GraphWriteClient : virtual public GraphWriteIf {
 public:
  GraphWriteClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphWriteClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t addEdge(const int64_t id1, const int64_t id2);
  void send_addEdge(const int64_t id1, const int64_t id2);
  int64_t recv_addEdge();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GraphWriteProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GraphWriteIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GraphWriteProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_addEdge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GraphWriteProcessor(boost::shared_ptr<GraphWriteIf> iface) :
    iface_(iface) {
    processMap_["addEdge"] = &GraphWriteProcessor::process_addEdge;
  }

  virtual ~GraphWriteProcessor() {}
};

class GraphWriteProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GraphWriteProcessorFactory(const ::boost::shared_ptr< GraphWriteIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GraphWriteIfFactory > handlerFactory_;
};

class GraphWriteMultiface : virtual public GraphWriteIf {
 public:
  GraphWriteMultiface(std::vector<boost::shared_ptr<GraphWriteIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GraphWriteMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GraphWriteIf> > ifaces_;
  GraphWriteMultiface() {}
  void add(boost::shared_ptr<GraphWriteIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t addEdge(const int64_t id1, const int64_t id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addEdge(id1, id2);
    }
    return ifaces_[i]->addEdge(id1, id2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GraphWriteConcurrentClient : virtual public GraphWriteIf {
 public:
  GraphWriteConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GraphWriteConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t addEdge(const int64_t id1, const int64_t id2);
  int32_t send_addEdge(const int64_t id1, const int64_t id2);
  int64_t recv_addEdge(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
